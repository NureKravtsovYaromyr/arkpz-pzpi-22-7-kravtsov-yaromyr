Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 














Звіт з лабораторної роботи № 3
 з дисципліни «Аналіз та рефакторинг коду»










Перевірила                                                                     Виконав 
асистент кафедри ПІ                                               ст. групи ПЗПІ-22-7 
Данієль Я. Д                                                           Кравцов Я.П.
                                 


  


























Харків 2024


1 Вступ 


Метою роботи є створення бізнес-логіки та адміністративних функцій для серверної частини програмного забезпечення.




2 ХІД РОБОТИ


В ході виконання лабораторної роботи було впроваджено ряд функцій, які охоплюють основні аспекти адміністрування, безпеки та аналізу даних. Опис інженерних рішень включає: 
Управління данними користувача:
* Створення адміністратора системи 
* Створення адміністратора будівлі 
* Створення користувача будівлі
* Оновлення данних користувача 
* Видалення користувача 
Управління данними будівель:
* Додавання нової будівлі адміністратором системи 
* Отримання інформації про будівлю 
* Отримання всіх будівель
* Оновлення данних будівлі
* Видалення будівлі 
Управління данними двері:
* Додавання нової двері
* Додавання доступу до двері користувачу будівлі
* Видалення доступу до двері користувачу будівлі
* Отримання інформацію про двері та користувачів, які мають до неї доступ 
* Отримання дверей на які користувач має доступ 
* Перевірка чи має користувач доступ до конкретні двері 
Математичний метод обробки данних:
Метод аналізує дані про доступ користувачів до дверей та визначає аномалії, де користувачі мають надмірну кількість доступів.
Логіка роботи:
1. Отримує дані про доступ користувачів до дверей.
2. Групує їх за ідентифікаторами користувачів (userId).
3. Підраховує кількість доступів для кожного користувача.
4. Вибирає користувачів, які мають більше 10 доступів.
Це дозволяє адміністраторам виявити потенційні помилки у системі доступу або випадки зловживання правами доступу.
Код до математичного методу обробки даних: 


1.   @ApiBearerAuth('bearer')
2.     @Roles(['building-admin', 'system-admin'])
3.     @UseGuards(RoleGuard)
4.     @Get('/statistics/access-anomalies')
5.     @ApiOperation({ summary: 'Find access anomalies (users with excessive access)' })
6.     async getAccessAnomalies() {
7.         try {
8.             return await this.doorService.getAccessAnomalies();
9.         } catch (error) {
10.             throw new HttpException(
11.                 error.message,
12.                 error.status || HttpStatus.INTERNAL_SERVER_ERROR,
13.             );
14.         }
15.     }
16. 17. async getAccessAnomalies() {
18.         const accessData = await this.getDoorAccessData();
19. 20.         const userAccessCounts: Record<string, number> = {};
21. 22.         accessData.forEach((access) => {
23.             if (!userAccessCounts[access.userId]) {
24.                 userAccessCounts[access.userId] = 0;
25.             }
26.             userAccessCounts[access.userId]++;
27.         });
28. 29.         const anomalies = Object.entries(userAccessCounts).filter(([userId, count]) => count > 10);
30. 31.         return {
32.             anomalies,
33.         };
34.     }
35. 36.     async getDoorAccessData() {
37.         try {
38.             return await this.doorUserRepository.findAll();
39.         } catch (error) {
40.             throw new HttpException(
41.                 'Failed to retrieve access data',
42.                 HttpStatus.INTERNAL_SERVER_ERROR,
43.             );
44.         }
45.     }
46. 





Розробка діаграм




UML Діаграма діяльності 


Обробка запиту на доступ до дверей
Учасники:
* Користувач
* API контролер
* Сервіс доступу (DoorService)
* База даних (Repository)
 Послідовність дій:
1. Користувач надсилає запит на доступ до дверей через API.
2. Контролер отримує запит і передає його до DoorService.
3. DoorService перевіряє наявність користувача у дверях через репозиторій.
4. Якщо доступ дозволено:
   * Сервіс повертає підтвердження доступу.
5. Якщо доступ заборонено:
   * Сервіс повертає помилку доступу.
6. Контролер надсилає відповідь користувачу.
Ця діаграма показує, як серверна частина обробляє запит на доступ до дверей, включаючи перевірку в сервісі, доступ до бази даних та повернення відповіді користувачеві.
  

Рисунок 1 -  UML Діаграма діяльності




UML діаграма взаємодії


Покроковий опис дій на діаграмі:
1. Крок 1:
   * Подія: Користувач надсилає запит на доступ до дверей (doorId, userId).
   * Дія: Сервер отримує запит.
2. Крок 2:
   * Подія: Відбувається перевірка коректності даних (doorId, userId).
   * Дія: Якщо дані некоректні, повертається помилка.
3. Крок 3:
   * Подія: Відбувається перевірка доступу користувача до дверей.
   * Дія: Запит до бази даних для перевірки доступу.
4. Гілка "Да":
   * Подія: Доступ дозволено.
   * Дія: Логування події, оновлення даних про доступ, повернення підтвердження.
5. Гілка "Нет":
   * Подія: Доступ заборонено.
   * Дія: Логування помилки доступу, повернення повідомлення про помилку.
6. Крок 4:
   * Подія: Відповідь надсилається користувачу.
   * Дія: Процес завершується.
Алгоритм на діаграмі:
1. Запит від користувача: Отримання даних (doorId, userId).
2. Перевірка даних: Валідація обов'язкових полів.
3. Перевірка доступу до дверей:
   * Якщо доступ є → Логування та підтвердження.
   * Якщо доступу немає → Логування помилки та відмова.
4. Відправка відповіді користувачу.


  

Рисунок 2 -  UML діаграма взаємодії
Висновки 




У ході виконання лабораторної роботи було розроблено серверну бізнес-логіку для системи управління доступом до дверей, що охоплює адміністративні функції, забезпечення безпеки та обробку даних. Реалізовано функціонал для управління користувачами, будівлями та дверима, включаючи перевірку доступів і статистичний аналіз.
Особливу увагу було приділено математичному методу обробки даних, який дозволяє виявляти аномалії у доступах користувачів до дверей. Також були побудовані UML-діаграми діяльності та взаємодії, що відображають ключові етапи обробки запитів на доступ.
Отримані результати підвищують ефективність управління системою доступу та дозволяють адміністраторам своєчасно виявляти і усувати потенційні загрози та недоліки.
Посилання на відеозапис: https://youtu.be/_F0SKti8rho