
1) Рекомендація: Дотримуватися стандартів стилю написання коду (Ruby Style Guide).
Опис: Встановлення єдиних стандартів відступів та стилю покращує читабельність коду та сприяє командній роботі.
  Приклад:

1 # Правильний стиль
2 def example_method
3   puts "Hello, Ruby!"
4 end

2) Рекомендація: Використовувати зміїний_регістр (snake_case) для змінних і методів, CamelCase для класів.
Опис: Чітке узгодження імен зменшує витрати на обмірковування того, як назвати змінні та методи, і спрощує їх використання іншими розробниками.
  Приклад:

1 # Поганий приклад
2 def f(x)
3   x + 10
4 end

5 # Гарний приклад
6 def add_ten(number)
7   number + 10
8 end

3) Рекомендація: Розбивайте код на маленькі методи з однією функцією.
Опис: Використання методів, що виконують одне завдання, полегшує масштабування та повторне використання коду.
  Приклад:

1 class Calculator
2   def add(a, b)
3     a + b
4   end
5
6   def subtract(a, b)
7     a - b
8   end
9 end

4) Рекомендація: Дотримуватися принципів рефакторингу, таких як DRY і KISS.
Опис: Рефакторинг зменшує повторюваність коду, полегшує його підтримку та знижує кількість помилок.
  Приклад:

1 # До рефакторингу
2 def calculate_area(width, height)
3   width * height
4 end

5 def calculate_perimeter(width, height)
6   2 * (width + height)
7 end

8 # Після рефакторингу
9 def rectangle_properties(width, height)
10   { area: width * height, perimeter: 2 * (width + height) }
11 end

5) Рекомендація: Використовуйте оптимізовані методи обробки даних.
Опис: Використання методів на кшталт map та reduce замість each підвищує продуктивність та скорочує код.
  Приклад:

1 # Оптимізований приклад
2 numbers = [1, 2, 3, 4]
3 squares = numbers.map { |num| num * num }
