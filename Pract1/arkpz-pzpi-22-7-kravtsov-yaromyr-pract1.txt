МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ














Звіт 
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду» 
























Перевірив                                                            Виконав 
ст. викладач ПІ                                                          ст. групи ПЗПІ-22-7 
Сокорчук Ігор Петрович                                     Кравцов Я.П.
            




















Харків 2024
1 МЕТА 
Навчитися рефакторингу програмного коду, закріпити основні правила оформлення коду. 




2 ЗАВДАННЯ
Обрати мову програмування для прикладів коду. Створити презентацію на тему «Правила оформлення програмного коду




3 ХІД РОБОТИ
Мною обрана маова програмування Ruby. 


1. Важливість правил оформлення коду


Опис:
Ruby — динамічна, об'єктно-орієнтована мова програмування, яка відома своєю простотою та читабельністю.
Стандартизація коду покращує командну роботу
Підвищує читабельність та підтримуваність
Зменшує кількість помилок


2. Структура коду


Опис:
Логічний поділ на модулі та класи
Використання директорій для структуризації
Коментарі для розділення секцій коду


1. Правильно:
2. # app/models/user.rb
3. class User
4.   # Код класу User
5. end
6. 7. Неправильно:
8. # user.rb
9. class user
10. # Код класу user
11. end


У правильному прикладі ми використовуємо правильний шлях до файлу, і клас названо з великої літери. Це полегшує навігацію по проєкту та підтримку коду. Неправильний приклад показує відсутність структури та неправильне іменування класу.


3. Форматування коду


Опис:
Використання двох пробілів для відступів
Максимальна довжина рядка: 80 символів
Стандарти для дужок та блоків коду


1. Правильно:
2. def some_method
3.   if condition
4.     do_something
5.   end
6. end
7. Неправильно:
8. def some_method
9.     if condition
10.           do_something
11.     end
12. end


Неправильне форматування може призвести до плутанини та помилок при читанні коду. Дотримання єдиних відступів покращує зрозумілість.


4. Конвенції іменування в Ruby


Опис:
Змінні та методи: snake_case
Класи та модулі: CamelCase
Зрозумілі та лаконічні імена
Уникання "магічних" чисел, використання констант


Правильно:
class UserProfile
  MAX_ATTEMPTS = 3


  def initialize(user_name)
    @user_name = user_name
  end
end


Неправильно:
class userprofile
  MaxAttempts = 3


  def Initialize(UserName)
    @UserName = UserName
  end
end


Правильне іменування допомагає уникнути непорозумінь і полегшує підтримку коду. Неправильне іменування може збити з пантелику інших розробників.


5. Ефективне використання коментарів


Опис:
Пояснення складної логіки, а не очевидного коду
Уникання надлишкових коментарів
Використання RDoc для документації


Правильно:
# Обчислює факторіал числа рекурсивно
def factorial(n)
  return 1 if n <= 1
  n * factorial(n - 1)
end


Неправильно:
# Метод факторіал
def factorial(n)
  # Якщо n менше або дорівнює 1, повернути 1
  if n <= 1
    return 1
  end
  # Повернути n помножене на факторіал n мінус 1
  n * factorial(n - 1)
end


Надлишкові коментарі роблять код важчим для сприйняття. Коментуйте лише те, що дійсно потребує пояснення.






6. Документування коду


Опис:
Формат коментарів для методів та класів
Опис параметрів та значень повернення
Приклади використання


Правильно:
# Клас для роботи з користувачами
class User
  # Ініціалізує користувача з ім'ям
  #
  # @param name [String] ім'я користувача
  def initialize(name)
    @name = name
  end
end






Неправильно:
class User
  def initialize(name)
    @name = name
  end
end


Документування коду полегшує його використання та підтримку. Відсутність документації може призвести до неправильного використання методів.


7. Приклади оформлення коду


Опис:
Статичний аналіз коду з RuboCop
Автоматичне форматування з Prettier
Інтеграція з CI/CD пайплайном


8. Документування коду


Опис:
Хороші практики оформлення
Поширені помилки та як їх уникнути
Вплив чистоти коду на команду


Правильно:
def calculate_total(price, tax_rate)
  total = price + (price * tax_rate)
  total.round(2)
end


Неправильно:
def calcTotal(p, t)
total=p+(p*t)
return total.round 2
end


Неправильний код має некоректні відступи, непослідовні імена, і пропущено дужки, що може призвести до синтаксичних помилок.


9. Висновки


Дотримання стилю покращує якість коду
Використання інструментів для автоматизації
Постійне навчання та вдосконалення




ВИСНОВКИ
Таким чином, під час роботи були здобуті навички рефакторингу програмного коду та детально вивчені основні правила його оформлення.
Посилання на youtube:
https://www.youtube.com/watch?v=39IfqIgEbu0
